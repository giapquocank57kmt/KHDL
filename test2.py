import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from prophet import Prophet
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split

# Title
st.title("üå¶Ô∏è ·ª®ng d·ª•ng d·ª± b√°o th·ªùi ti·∫øt th√¥ng minh")


# Load d·ªØ li·ªáu
@st.cache_data
def load_data():
    try:
        df = pd.read_csv("weatherHistory.csv")
        df['Formatted Date'] = pd.to_datetime(df['Formatted Date'], utc=True).dt.tz_localize(None)

        # Chu·∫©n h√≥a t√™n c·ªôt
        df.columns = df.columns.str.strip().str.replace(' ', '_')

        # Ki·ªÉm tra c√°c c·ªôt c√≥ s·∫µn
        cols = ['Formatted_Date', 'Temperature_(C)']
        if 'Precip_Type' in df.columns or 'Precipitation_Sum_(mm)' in df.columns:
            cols.extend(['Humidity', 'Pressure_(millibars)', 'Precip_Type'])
            if 'Precipitation_Sum_(mm)' in df.columns:
                cols.append('Precipitation_Sum_(mm)')

        df = df[cols].rename(columns={
            'Formatted_Date': 'ds',
            'Temperature_(C)': 'temperature'
        })

        return df

    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu: {str(e)}")
        return pd.DataFrame()


df = load_data()


# ∆Ø·ªõc l∆∞·ª£ng l∆∞·ª£ng m∆∞a n·∫øu kh√¥ng c√≥ s·∫µn
def estimate_precipitation(df):
    if 'Precipitation_Sum_(mm)' in df.columns:
        df['precipitation'] = df['Precipitation_Sum_(mm)']
        return df

    st.warning("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu l∆∞·ª£ng m∆∞a, ƒëang ∆∞·ªõc l∆∞·ª£ng t·ª´ ƒë·ªô ·∫©m v√† √°p su·∫•t...")

    # T·∫°o c·ªôt is_rain d·ª±a tr√™n Precip_Type n·∫øu c√≥
    if 'Precip_Type' in df.columns:
        df['is_rain'] = df['Precip_Type'].apply(lambda x: 1 if x == 'rain' else 0)
    else:
        # ∆Ø·ªõc l∆∞·ª£ng is_rain d·ª±a tr√™n ƒë·ªô ·∫©m
        df['is_rain'] = np.where(df['Humidity'] > 80, 1, 0)

    # ∆Ø·ªõc l∆∞·ª£ng l∆∞·ª£ng m∆∞a b·∫±ng heuristic
    df['precipitation'] = np.where(
        df['is_rain'] == 1,
        (df['Humidity'] - 75) * (1010 - df['Pressure_(millibars)']) / 20,
        0
    )
    df['precipitation'] = df['precipitation'].clip(lower=0)

    return df


if not df.empty:
    df = estimate_precipitation(df)
    st.subheader("üìä D·ªØ li·ªáu th·ªùi ti·∫øt")
    st.dataframe(df.head(100))

    # T√πy ch·ªçn d·ª± b√°o
    options = ['Nhi·ªát ƒë·ªô', 'L∆∞·ª£ng m∆∞a']
    option = st.selectbox("üîç Ch·ªçn y·∫øu t·ªë c·∫ßn d·ª± b√°o:", options)

    # C√†i ƒë·∫∑t d·ª± b√°o
    st.sidebar.header("‚öôÔ∏è C√†i ƒë·∫∑t d·ª± b√°o")
    periods = st.sidebar.slider("S·ªë ng√†y d·ª± b√°o:", 1, 14, 7)
    confidence = st.sidebar.slider("M·ª©c ƒë·ªô tin c·∫≠y:", 80, 95, 90)


    # H√†m d·ª± b√°o c·∫£i ti·∫øn
    def enhanced_forecast(df, target_col, label):
        try:
            df_model = df[['ds', target_col]].rename(columns={target_col: 'y'}).dropna()

            if len(df_model) < 2:
                st.error("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ d·ª± b√°o")
                return

            model = Prophet(interval_width=confidence / 100)
            model.fit(df_model)

            future = model.make_future_dataframe(periods=periods)
            forecast = model.predict(future)

            # Bi·ªÉu ƒë·ªì
            fig, ax = plt.subplots(figsize=(12, 6))
            ax.plot(df_model['ds'], df_model['y'], label='D·ªØ li·ªáu l·ªãch s·ª≠', color='blue')
            ax.plot(forecast['ds'], forecast['yhat'], label='D·ª± b√°o', color='red', linestyle='--')

            # V√πng tin c·∫≠y
            ax.fill_between(
                forecast['ds'],
                forecast['yhat_lower'],
                forecast['yhat_upper'],
                color='gray', alpha=0.2, label=f'Kho·∫£ng tin c·∫≠y {confidence}%'
            )

            ax.set_title(f"D·ª± b√°o {label} {periods} ng√†y t·ªõi", fontsize=14)
            ax.set_xlabel("Ng√†y", fontsize=12)
            ax.set_ylabel(label, fontsize=12)
            ax.legend()
            ax.grid(True, linestyle='--', alpha=0.7)
            plt.xticks(rotation=45)
            st.pyplot(fig)

            # Hi·ªÉn th·ªã d·ªØ li·ªáu d·ª± b√°o
            st.subheader(f"üìà K·∫øt qu·∫£ d·ª± b√°o {label}")
            forecast_df = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(periods)
            forecast_df.columns = ['Ng√†y', 'Gi√° tr·ªã d·ª± b√°o', 'Gi√° tr·ªã th·∫•p nh·∫•t', 'Gi√° tr·ªã cao nh·∫•t']
            st.dataframe(forecast_df.set_index('Ng√†y'))

        except Exception as e:
            st.error(f"L·ªói khi d·ª± b√°o: {str(e)}")


    # Th·ª±c hi·ªán d·ª± b√°o
    if option == 'Nhi·ªát ƒë·ªô':
        enhanced_forecast(df, 'temperature', 'Nhi·ªát ƒë·ªô (¬∞C)')
    elif option == 'L∆∞·ª£ng m∆∞a':
        enhanced_forecast(df, 'precipitation', 'L∆∞·ª£ng m∆∞a (mm)')
else:
    st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã. Vui l√≤ng ki·ªÉm tra file d·ªØ li·ªáu.")